@model Ishop.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<style type="text/css">
    .loading {
        font-size: 10pt;
        width: 200px;
        height: 100px;
        display: none;
        position: fixed;
        z-index: 999;
    }
</style>
<style type="text/css">
    .loading {
        font-size: 10pt;
        width: 200px;
        height: 100px;
        display: none;
        position: fixed;
        z-index: 999;
    }

    .form-rounded {
        border-radius: 1rem;
    }
</style>


<style>
    body {
        background-image: url(../../images/33.jpg);
        background-size: cover;
        font-family: Calibri
    }

    .table-hover > tbody > tr:hover {
        background-color: #D2D2D2;
    }
</style>


<div class="card-header" style="background-color: #001F3F">
    <h3 class="card-title" style="color:white">
        <i class="fa fa-user-plus"></i>
        New User Account
    </h3>
</div>

@if (TempData["Msg"] != null)
{<div class="row">
        <div class="alert alert-success col-md-6 col-md-offset-4" align="center">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            @TempData["Msg"]
        </div>
    </div>
}

<script>
    window.setTimeout(function () {
        $(".alert").fadeTo(500, 0).slideUp(500, function () {
            $(this).remove();
        });
    }, 2000);
</script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


 
       
        <div class="col d-flex justify-content-center">
            <div class="col-md-7 col-sm-9 col-12">
                <div class="card mb- mb-xl-0" style="border-radius: 14px;">

                    <div class="card-outline card-warning card-body text-left" style="border-radius: 14px;">
                        <h7 style="color:seagreen"><i class="fa fa-user-plus"></i> New Account.</h7>
                        <div class="dropdown-divider"></div>
                        <form>

                            @using (Ajax.BeginForm("Create", "T", new AjaxOptions { HttpMethod = "POST", OnSuccess = "submitSuccess" }))
                            {


                            <div class="form-row">

                                <div class="form-group col-md-5">
                                    <label style="color:darkblue">Username</label>
                                    @Html.EditorFor(model => model.UserName, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control form-rounded",
                                       @PlaceHolder = "Username",
                                       @required = "required"
                                   }
                               })  @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                                <div class="form-group col-md-5">
                                    <label style="color:darkblue">Email Address</label>
                                    @Html.EditorFor(model => model.Email, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control form-rounded",
                                       @PlaceHolder = "Email Address",
                                       @required = "required"
                                   }
                               })  @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-5">
                                    <label style="color:darkblue">Password </label>
                                    @Html.EditorFor(model => model.Password, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control form-control-sm form-rounded",
                                       @PlaceHolder = "Password",
                                       @required = "required"

                                   }
                               })  @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-5">
                                <label style="color:darkblue">Confirm Password </label>
                                @Html.EditorFor(model => model.ConfirmPassword, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control form-control-sm form-rounded",
                                   @PlaceHolder = "Confirm Password",
                                   @required = "required"

                               }
                           })  @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>


                         
                            <asp:TextBox ID="txtPassword" runat="server" TextMode="Password" />

                            <p id="toggle_pwd" class="fa fa-fw fa-eye field_icon text-primary"> </p>
                            <small>Show password</small>
                            <script type="text/javascript">
                                $(function () {
                                    $("#toggle_pwd").click(function () {
                                        $(this).toggleClass("fa-eye fa-eye-slash");
                                        var type = $(this).hasClass("fa-eye-slash") ? "text" : "password";
                                        $("[id*=Password]").attr("type", type);
                                    });
                                });
                            </script>


                            </div>
    <medium style="color:navy">
        <i class="fa fa-shield"></i>
        Account Type ensures the system allocates the required access level to the user
    </medium>
    <br />
    <div class="row">


        <div class="form-group col-md-5">



            @Html.DropDownList("UserRoles", (SelectList)ViewBag.Name, "-Account Type- ", new { @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.UserRoles, "", new { @class = "text-danger" })
        </div>
    </div>


    <table>
        <thead>
            <tr>
                <p style="color:white">Actions</p>
            </tr>
        </thead>
        <tbody>
        <td>
            <input type="submit" value="Add New Account" class="btn btn-success" />   ||
            <input type="Reset" value="Reset" class="btn btn-danger" />   ||
            @Html.ActionLink("Home", "Index", "Home", null, new { @class = "btn btn-primary btn" })   ||



            <br />

            <i style="font-family:Calibri">   @Html.ValidationSummary(false, "", new { @class = "text-danger" })</i>
        </td>
        </tbody>
    </table>
                            }

                        </form>



                    </div>
                </div>
                
            </div>
        </div>
  
}

    @section Scripts
                            {
        @Scripts.Render("~/bundles/jqueryval")
    }
